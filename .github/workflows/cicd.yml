name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  # Plan job
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: cicd
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Replace vars in the code from the githubactions environment
    - name: Replace GOOGLE_PROJECT_ID Providers
      run: sed -i "s/GOOGLE_PROJECT_ID/${GOOGLE_PROJECT_ID}/g" providers.tf
      env:
        GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
     
    - name: Replace GOOGLE_PROJECT_ID Variables
      run: sed -i "s/GOOGLE_PROJECT_ID/${GOOGLE_PROJECT_ID}/g" terraform.tfvars
      env:
        GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
      
    - name: Replace GITHUB_TOKEN Variables
      run: sed -i "s/GITHUB_TOKEN/${GITHUB_TOKEN}/g" terraform.tfvars
      env:
        GITHUB_TOKEN: ${{ secrets.CREATE_REPO }}

    - name: Replace FLUX_REPO Variables
      run: sed -i "s/FLUX_REPO/${FLUX_REPO}/g" terraform.tfvars
      env:
        FLUX_REPO: ${{ vars.FLUX_REPO }}

    - name: Replace PRIMARY_IP_CIDR Variables
      run: sed -i "s#PRIMARY_IP_CIDR#${PRIMARY_IP_CIDR}#g" terraform.tfvars
      env:
        PRIMARY_IP_CIDR: ${{ vars.PRIMARY_IP_CIDR }}

    - name: Replace SERVICES_IP_CIDR Variables
      run: sed -i "s#SERVICES_IP_CIDR#${SERVICES_IP_CIDR}#g" terraform.tfvars
      env:
        SERVICES_IP_CIDR: ${{ vars.SERVICES_IP_CIDR }}

    - name: Replace PODS_IP_CIDR Variables
      run: sed -i "s#PODS_IP_CIDR#${PODS_IP_CIDR}#g" terraform.tfvars
      env:
        PODS_IP_CIDR: ${{ vars.PODS_IP_CIDR }}
    
    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: terraform init -reconfigure -upgrade
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Checks that all Terraform configuration files
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -var deploy_flux=true -var create_flux_repo=false -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
  # Apply job
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: cicd
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Replace vars in the code from the githubactions environment
    - name: Replace GOOGLE_PROJECT_ID Providers
      run: sed -i "s/GOOGLE_PROJECT_ID/${GOOGLE_PROJECT_ID}/g" providers.tf
      env:
        GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
     
    - name: Replace GOOGLE_PROJECT_ID Variables
      run: sed -i "s/GOOGLE_PROJECT_ID/${GOOGLE_PROJECT_ID}/g" terraform.tfvars
      env:
        GOOGLE_PROJECT_ID: ${{ vars.GOOGLE_PROJECT_ID }}
      
    - name: Replace GITHUB_TOKEN Variables
      run: sed -i "s/GITHUB_TOKEN/${GITHUB_TOKEN}/g" terraform.tfvars
      env:
        GITHUB_TOKEN: ${{ secrets.CREATE_REPO }}

    - name: Replace FLUX_REPO Variables
      run: sed -i "s/FLUX_REPO/${FLUX_REPO}/g" terraform.tfvars
      env:
        FLUX_REPO: ${{ vars.FLUX_REPO }}

    - name: Replace PRIMARY_IP_CIDR Variables
      run: sed -i "s#PRIMARY_IP_CIDR#${PRIMARY_IP_CIDR}#g" terraform.tfvars
      env:
        PRIMARY_IP_CIDR: ${{ vars.PRIMARY_IP_CIDR }}

    - name: Replace SERVICES_IP_CIDR Variables
      run: sed -i "s#SERVICES_IP_CIDR#${SERVICES_IP_CIDR}#g" terraform.tfvars
      env:
        SERVICES_IP_CIDR: ${{ vars.SERVICES_IP_CIDR }}

    - name: Replace PODS_IP_CIDR Variables
      run: sed -i "s#PODS_IP_CIDR#${PODS_IP_CIDR}#g" terraform.tfvars
      env:
        PODS_IP_CIDR: ${{ vars.PODS_IP_CIDR }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}